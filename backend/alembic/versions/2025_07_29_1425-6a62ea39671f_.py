"""empty message

Revision ID: 6a62ea39671f
Revises:
Create Date: 2025-07-29 14:25:05.514932

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "6a62ea39671f"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tracking",
        sa.Column("reminder_date", sa.Date(), nullable=False),
        sa.Column(
            "is_completed",
            sa.Boolean(),
            server_default="0",
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tracking")),
    )
    op.create_table(
        "users",
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("password", sa.LargeBinary(), nullable=False),
        sa.Column("telegram_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "is_active",
            sa.Boolean(),
            server_default="1",
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
        sa.UniqueConstraint(
            "telegram_id", name=op.f("uq_users_telegram_id")
        ),
        sa.UniqueConstraint(
            "username", name=op.f("uq_users_username")
        ),
    )
    op.create_table(
        "habits",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("purpose", sa.TEXT(), nullable=False),
        sa.Column(
            "created",
            sa.Date(),
            server_default=sa.text("CURRENT_DATE"),
            nullable=False,
        ),
        sa.Column("date_of_completion", sa.Date(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_habits_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_habits")),
    )
    op.create_table(
        "tasks",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.TEXT(), nullable=False),
        sa.Column("deadline_date", sa.Date(), nullable=False),
        sa.Column("deadline_time", sa.Integer(), nullable=False),
        sa.Column(
            "hour_before_reminder", sa.Integer(), nullable=False
        ),
        sa.Column("date_of_completion", sa.Date(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "deadline_time >= 0 AND deadline_time <= 23",
            name=op.f("ck_tasks_ck_time_range"),
        ),
        sa.CheckConstraint(
            "hour_before_reminder >= 1 AND hour_before_reminder <= 24",
            name=op.f("ck_tasks_ck_reminder_range"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_tasks_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tasks")),
    )
    op.create_table(
        "schedules",
        sa.Column(
            "day",
            sa.Enum(
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
                "SUNDAY",
                name="weekday",
            ),
            nullable=False,
        ),
        sa.Column("habit_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["habit_id"],
            ["habits.id"],
            name=op.f("fk_schedules_habit_id_habits"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_schedules")),
    )
    op.create_table(
        "timers",
        sa.Column("notification_hour", sa.Integer(), nullable=False),
        sa.Column("habit_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.CheckConstraint(
            "notification_hour >= 0 AND notification_hour <= 23",
            name=op.f("ck_timers_ck_notification_hour_range"),
        ),
        sa.ForeignKeyConstraint(
            ["habit_id"],
            ["habits.id"],
            name=op.f("fk_timers_habit_id_habits"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_timers")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("timers")
    op.drop_table("schedules")
    op.drop_table("tasks")
    op.drop_table("habits")
    op.drop_table("users")
    op.drop_table("tracking")
    # ### end Alembic commands ###
